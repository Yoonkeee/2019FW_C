#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define print printf
const int CALLOCSIZE = 200;  // 동적 할당시 임시로 사용할 사이즈. 코드 완성 후엔 각 선언마다 적절한 lenth로 계산해서 사용할 것
void find_operator(char*);
int find_dot(char*);
char* fill_zero_int(char*, char*);
char* fill_zero_dic(char*, char*);
char* cal_plus(char*, char*);
char* cal_minus(char*, char*);
int abs_compare(char*, char*);
char* minus_exception(char*, char*);
char *result, *X, *Y;
char* find_first_negative(char*);
char* cal_multiply(char*, char*);
char* remove_dot(char*, char*);
char* multiply_onebyone(char*, int, int);
char* fill_zero_multi(char*, int);
int cal_decimal_length(char*, char*);
int first_negative = 0;  // 첫 숫자가 음수일 경우 1, default 0
int A_is_negative = 0;  // A가 음수일 경우 1, default 0
int B_is_negative = 0;  // B가 음수일 경우 1, default 0
//int A_bigger_abs = 0;  // 첫 숫자 A가 음수이며 덧셈할 B보다 값이 더 클 경우 1, default 0
int multiply_decimal = 0;  // 소수가 있는 수의 곱셈시 1, default 0
// end definition

int main() {
//    char input[] = "";
    char* TEST_S = (char*)calloc(sizeof(char) , CALLOCSIZE);
    X = (char*)calloc(sizeof(char) , CALLOCSIZE);
    Y = (char*)calloc(sizeof(char) , CALLOCSIZE);
    result = (char*)calloc(sizeof(char) , CALLOCSIZE);
//    scanf("%s", X);
//    scanf("%s", Y);
//    X = "99999999999999999999999999.999999999999999999999999";
//    Y = "99999999.999999999999999999999999999999999999999999";
//    X = "123.14";
//    Y = "154.546";
    X = "1";
    Y = "999";
    //19,030.79444
    // 12314 00000
    //  6157 00000
    //   492 56000
    //    61 57000
    //     4 92560
    //       73884
//    remove_dot(TEST_S, X);
//    X = TEST_S;
//    X = find_first_negative(X);
//    X = fill_zero_int(Y, X);
//    Y = fill_zero_int(X, Y);
//    X = fill_zero_dic(Y, X);
//    Y = fill_zero_dic(X, Y);
//
    result = cal_plus(X, Y);  // result에 덧셈 결과 저장
//    result = cal_minus(X, Y);  // result에 뺄셈 결과 저장
//    result = cal_multiply(X, Y);
//    find_operator(input);
    printf("-------------------\n");
    printf("X : %s \nY : %s \n", X, Y);  // 현재 A, B값 (자리수까지 맞추어져있음)
    printf("result : %s\n", result);
    return 0;
}  // end main()

char* cal_multiply(char *X, char *Y) {  // 곱셈
    char *A = (char*)calloc(sizeof(char) , CALLOCSIZE);
    char *B = (char*)calloc(sizeof(char) , CALLOCSIZE);
    char *return_result, *temp_A, *temp_B;
    int length_A, length_B, return_size, multiply_num, abs_length_B, decimal_length, i;
    decimal_length = cal_decimal_length(X, Y);
//    printf("!!!! decimal_length : %d\n", decimal_length);
    remove_dot(A, X);
    remove_dot(B, Y);
    length_A = strlen(A);
    length_B = strlen(B);
    abs_length_B = strlen(B);
    return_size = (length_A + length_B);
    return_result = (char*)calloc(sizeof(char) , return_size);
    temp_A = (char*)calloc(sizeof(char) , return_size);
    temp_B = (char*)calloc(sizeof(char) , return_size);
//    printf("A : %s , length_A : %d \nB : %s , length_B : %d \n", A, length_A, B, length_B);
    while(length_B > 0) {
//        printf("in while, length_B = %d , multiply_num : %d \n", length_B, *B - 48);
        multiply_num = *B - 48;
        temp_A = multiply_onebyone(A, multiply_num, strlen(A)+1);  // here
//        printf("A : %s , multiply_num : %d , return_size : %d \n", A, multiply_num, return_size);
//        printf("in cal_multiply, return_result : %s \n", temp_A);
//        printf("in while, bottom length_B = %d \n", length_B);
        if(length_B > 0)
            temp_A = fill_zero_multi(temp_A, length_B-1);
        if(length_B == abs_length_B) {
            temp_B = temp_A;
            return_result = temp_A;
        } else if(length_B < abs_length_B) {  // temp_B > temp_A
//            printf("temp_A : %s\n", temp_A);
            temp_A = fill_zero_int(temp_B, temp_A);
//            printf("temp_A : %s\n", temp_A);
            return_result = cal_plus(temp_B, temp_A);
            printf("%s  +  %s  =  %s \n", temp_B, temp_A, return_result);
            temp_B = return_result;
        }
        B++;
        length_B--;
    }
    if(multiply_decimal) {
        temp_A = (char*)calloc(sizeof(char), strlen(return_result));
        temp_B = (char*)calloc(sizeof(char), strlen(return_result)+1);
        strcpy(temp_A, return_result);
        for(i=0; i < strlen(return_result)+1 ; i++) {
            temp_B[i] = temp_A[i];
            if(i == strlen(return_result) - decimal_length) {
                temp_B[i] = '.';
                temp_A--;
            }
        }  // end for
        return_result = temp_B;
    }  // end if(multiply_decimal)
    return return_result;
}  // end cal_multiply()

char* fill_zero_multi(char* A, int num) {
    char *temp = A;
//    printf("num : %d , A : %s \n", num, A);
    
    char *filled_A = (char*)calloc(sizeof(char) , CALLOCSIZE);
//    char *filled_A = (char*)calloc(sizeof(char) , (strlen(A) + num));
    char *zeros = (char*)calloc(sizeof(char) , CALLOCSIZE);
//    char *zeros = (char*)calloc(sizeof(char) , strlen(filled_A));
    for( ; num > 0; num--)
        strcat(zeros, "0");
    strcat(filled_A, temp);
    strcat(filled_A, zeros);
//    printf("in fill_zero_multi, filled_A : %s \n", filled_A);
    return filled_A;
}  // end fill_zero_multi()

char* multiply_onebyone(char* A, int num, int size) {
    char *temp = (char*)calloc(sizeof(char) , size);
    char *temp2 = (char*)calloc(sizeof(char) , size);
    int i, sum, return_num, length_A,carry=0;
    length_A = strlen(A);
//    printf("for first A : %s \n\n", A);
    for( i=0; i < length_A-1 ; i++, A++) ;//printf("in ++, i : %d , A : %c \n", i, *A);
    for( i=size-1; i >= 0; i--, A--) {
        return_num = *A - 48;
        sum = (return_num * num) + carry;
//        printf("i : %d,return_num : %d, num : %d, carry : %d , sum : %d \n",
//               i, return_num, num, carry, sum);
        if(sum >= 10) {
            carry = 0;
            carry = sum / 10;
            sum = sum % 10;
        }
//        temp[i] = i == 0 ? carry + 48 : sum + 48;
//        temp[i] = sum >= 0 && sum <= 9 ? carry + 48 : sum + 48;
        if(sum >= 0 && sum <= 9)
            temp[i] = sum+48;
        else {
            if(carry > 0) {
                temp[i] = carry + 48;
                carry = 0;
            }
            else ;
                temp[i] = '0';  // here
        }
//        printf("temp : %c, sum : %d \n", temp[i], sum);
    }  // end for
    for(i = 0 ; i <= strlen(temp); i++) {
        if( *temp == '0')
            temp++;
        else
            break;
    }
//    printf("returning temp : %s\n", temp);
    return temp;
}  // end multiply_onebyone()

char* remove_dot(char *TEST_S, char *X) {  // input : variable after removed dot place, number want dot to be removed
    char *A = TEST_S;
    while(*A++ = *X++)
        if(*(X) == '.')
            X++;
    return TEST_S;
}  // end remove_dot()

int cal_decimal_length(char* X, char* Y) {  // 곱셈시 각 수의 소수부 길이를 계산하여 합 return
    int len=0, a, b;
    a = strlen(X) - find_dot(X);
    b = strlen(Y) - find_dot(Y);
    if(a > 0)
        len += a-1;
    if(b > 0)
        len += b-1;
    if(len>0)
        multiply_decimal = 1;
    return len;
}  // end cal_decimal_length()

char* cal_plus(char *X, char*Y) {  // 덧셈
    if(first_negative) return minus_exception(X, Y);
    int i, j, sum, oneA, oneB, carry=0, length_longer;
    char *A = X, *B = Y;  // X,Y로 받아 A,B로 이름 바꿔서 사용
    char *return_result, doPlus, *temp;
    int length_A = strlen(A);
    int length_B = strlen(B);
    temp = (char*)calloc(sizeof(char) , CALLOCSIZE);
    return_result = (char*)calloc(sizeof(char) , strlen(X));
    for(i = 0; i < length_A-1; i++, A++) continue;  // A와 B의 포인터 위치를 맨 끝으로 이동하여 맨 뒤부터 계산하도록 함
    for(j = 0; j < length_B-1; j++, B++) ;
    
    if(length_A == length_B) length_longer = length_A;
    
    length_longer = length_A > length_B? length_A : length_B;
    
    for(i = length_longer-1 ; i >= 0 ; i--, A--, B--) {  // 맨 뒤부터 앞으로 한칸씩 수행
        if(*A == '.' || *B == '.') {  // 소수점을 만나게 되면 점을 찍고 다음 반복 수행
            return_result[i] = '.';
            continue;
        }
        oneA = *A - 48;  // ASCII 값 중 0~9로 위치하도록 보정
        oneB = *B - 48;
        if(oneA < 0) {
            oneA = 0;
            A++;
        }
        if(oneB < 0) {
            oneB = 0;
            B++;
        }
        sum = oneA + oneB;  // 덧셈 수행
        printf("oneA : %d , oneB : %d , carry : %d, sum : %d \n", oneA, oneB, carry, sum);
        if(carry) {  // 지난 덧셈에서 carry가 있을 경우 sum에 carry를 더함
            sum += carry;
            carry = 0;  // carry 사용 후 0으로 초기화
        }
        doPlus = (sum % 10) + 48;  // ASCII 0~9값 설정
        if(sum >= 10) carry++;  // 만약 합이 10보다 클 경우 carry++
        return_result[i] = doPlus;  // 현재 위치에 덧셈 결과 넣음
//        printf("i : %d, return_result[i] : %c\n", i, return_result[i]);
    }
//    printf("len : %d\n", strlen(return_result));
//    printf("final return_result : %s\n", return_result);
    if(carry) {  // 맨 앞까지 덧셈을 끝낸 후 carry가 있다면 결과값 맨 앞에 1을 추가
        strcat(temp, "1");
        strcat(temp, return_result);
        return_result = temp;
    }
    return return_result;
}  // end cal_plus

char* find_first_negative(char* X) {  // 첫 숫자가 음수일 경우 global first_negative를 켜주고 음수를 뗀 숫자 return
    if(*X == '-') {
        X++;
        first_negative = 1;
    }
    return X;
}  // end find_first_negative()

//char* find_negative(char *X)

int abs_compare(char* X, char* Y) {
    int length_A = find_dot(X);
    int length_B = find_dot(Y);
    char *A = X, *B = Y;
    if(length_A > length_B)
        return 1;
    else if(length_A == length_B) {
        if(*A > *B)
            return 1;
        else {
            A++; B++;
        }
    }
    return 0;
}  // end abs_compare()

char* minus_exception(char *X, char *Y) {
    // -5 + 11  -> (11-5) =  6 -> -A + B = +(B - A)
    // -5 +  2  -> -(5-2) = -3 -> -A + B = -(A - B)  -> ** 예외 처리 할 case **
    // 음수 + 양수 의 경우 음수, 양수간의 절대값 대수 비교가 필요.  abs_compare() returns absolute value compare
    // 계산은 절대값간의 뺄셈으로 이루어지나, 음수가 더 클 경우 최종 결과 음수 / 양수가 더 클 경우 최종 결과 양수.
    char *A=X, *B=Y;
    char *temp_return, *temp;
    int A_bigger_abs = 0;
    A_bigger_abs = abs_compare(X, Y);  // X의 절대값이 Y보다 클 경우 A_bigger_abs = 1
    first_negative = 0;
    temp_return = (char*)calloc(sizeof(char) , CALLOCSIZE);
    if(A_bigger_abs) {  // A<0 && abs(A) > abs(B)
        temp = (char*)calloc(sizeof(char) , CALLOCSIZE);
        temp_return = cal_minus(A, B);
        strcat(temp, "-");  // 마이너스 부호 붙임
        strcat(temp, temp_return);
        temp_return = temp;
    } else  // A<0 && abs(B) > abs(A)
        temp_return = cal_minus(B, A);
    // end if
    A_bigger_abs = 0;
    return temp_return;
}  // end minus_exception

char* cal_minus(char *X, char*Y) {  // 뺄셈
    int i, sum, oneA, oneB, carry=0;
    char *A, *B;  // A와 B를 바꿀 부분  <<----- B > A 라서 뺄셈시 음수가 될 때
    A = X; B = Y;  // X,Y로 받아 A,B로 이름 바꿔서 사용
    char *return_result, doMinus, *temp;
    int length_A = strlen(A);
    temp = (char*)calloc(sizeof(char) , CALLOCSIZE);
    return_result = (char*)calloc(sizeof(char) , strlen(X));
    for(i = 0; i < length_A-1; i++, A++, B++) continue;  // A와 B의 포인터 위치를 맨 끝으로 이동하여 맨 뒤부터 계산하도록 함
    for(i = length_A-1 ; i >= 0 ; i--, A--, B--) {
        if(*A == '.' || *B == '.') {  // 소수점을 만나게 되면 점을 찍고 다음 반복 수행
            return_result[i] = '.';
            continue;
        }
        oneA = *A - 48;  // ASCII 값 중 0~9로 위치하도록 보정
        oneB = *B - 48;
        sum = oneA - oneB;  // 뺄셈 수행
        if(carry) {  // 직전 반복 뺼셈에서 carry 발생했을 경우 -1
            sum--;
            carry = 0;  // carry 사용 후 0으로 초기화
        }
        if(sum < 0 && i == 0) {  // 맨 앞자리 뺄셈인데 음수일 경우
            sum *= -1;  // 양수화
            carry++;  // 캐리 ++
        } else if(sum < 0) {  // 뺄셈이 음수일 경우
            sum += 10;  // 10을 더하고 캐리 ++
            carry++;
        }
        doMinus = (sum % 10) + 48;  // ASCII 0~9값 설정
        return_result[i] = doMinus;
    }
    if(carry) {  // 계산을 끝까지 마치고도 캐리가 있는 경우 = 계산 결과가 음수가 된 경우
        strcat(temp, "-");  // 마이너스 부호 붙임
        strcat(temp, return_result);
        return_result = temp;
    }
    return return_result;
}  // end cal_minus

char* fill_zero_int(char* A, char* B) {  // 덧셈, 뺄셈시 정수부 자리수가 차이나는 만큼 0으로 채움
    int int_A = find_dot(A);  // A의 정수부 길이
    int int_B = find_dot(B);  // B의 정수부 길이
    int difference_int = int_A>int_B? int_A - int_B: int_B - int_A;
    char *temp_A = A;  // A를 temp_A에 복사
    char *temp_B = B;  // B를 temp_B에 복사
//    char *temp = (char*)calloc((strlen(A) + difference_int) , sizeof(char));  // 두 수의 자릿수가 차이나는 만큼 0으로 채울 공간
    char *temp = (char*)calloc(sizeof(char), CALLOCSIZE);
    char *temp2 = (char*)calloc(sizeof(char), CALLOCSIZE);

//    difference_int = int_A - int_B;
    if(int_A > int_B) {  // 정수부가 A가 B보다 긴 경우
        for( ; difference_int > 0; difference_int--)  // 차이나는 만큼 0으로 채움
            strcat(temp, "0");
//        strcat(tempInt, temp_B);
//        return tempInt;
    }
    strcat(temp2, temp);
    strcat(temp2, temp_B);
    return temp2;
}  // end plus

char* fill_zero_dic(char *A, char *B) {  // 덧셈, 뺄셈시 소수부 자리수가 차이나는 만큼 0으로 채움
    int int_A = find_dot(A);  // A의 정수부 길이
    int int_B = find_dot(B);  // B의 정수부 길이
    int dec_A = strlen(A) - int_A;  // A의 소수부 길이
    int dec_B = strlen(B) - int_B;  // B의 소수부 길이
    int difference_dec = dec_A - dec_B;
    if(difference_dec <= 0) return B;
    char *temp_A = A;  // A를 temp_A에 복사
    char *temp_B = B;  // B를 temp_B에 복사
    char *temp = (char*)calloc((strlen(A) + difference_dec) , sizeof(char));  // 두 수의 자릿수가 차이나는 만큼 0으로 채울 공간
    char *temp2 = (char*)calloc((strlen(A) + difference_dec) , sizeof(char));  // 두 수의 자릿수가 차이나는 만큼 0으로 채울 공간

    if(difference_dec > 0)   // A의 소수부가 더 긴 경우
        for( ; difference_dec > 0; difference_dec--)
            strcat(temp, "0");
    strcat(temp2, temp_B);
    strcat(temp2, temp);
    return temp2;
}

int find_dot(char* num) {  // 소수점까지의 length(정수부 길이)를 찾아 return함
    int len_of_number = strcspn(num, ".");
    return len_of_number;
}

void find_operator(char* input) {
    int i;
    int size = strlen(input);
    print("%d",size);
    for(i = 0; i < size; i++) {
        if(isdigit(input[i]) == 0) {  // 정수가 아닌 문자 탐지
            switch(input[i]) {
                case '+':  // 덧셈 +
                    break;
                case '-':  // 뺄셈 -
                    break;
                case '*':  // 곱셈 *
                    break;
                default:  // 잘못 입력된 경우
                    print("\n!! Unavailable input !!\n");
                    exit(0);
            }  // end switch
        }  // end if
    }  // end for
}  // end find_operator

//                   ( 5 )   ( 5 )
// 999999 * 999999 = 99999 8 00000 1
//        8999991000000  +  0899999100000  =  9899990100000
//        9899990100000  +  0089999910000  =  9989990010000
//        9989990010000  +  0008999991000  =  9998990001000
//        9998990001000  +  0000899999100  =  9999890000100
//        9999890000100  +  0000089999910  =  9999980000010
//                                              !!  999998000001 !!
//        899999100000  +  089999910000  =  989999010000
//        989999010000  +  008999991000  =  998999001000
//        998999001000  +  000899999100  =  999899000100
//        999899000100  +  000089999910  =  999989000010
//        999989000010  +  000089999910  =  1000078999920
